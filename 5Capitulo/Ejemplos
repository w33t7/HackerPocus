/*Figura 5.3: fig05_03.c
  Creacion y uso de una funcion definida por el usuario*/
  
  #include<stdio.h>
  
  int cuadrado(int y); /*prototipo de la funcion*/
  
  /*La funcion main comienza la ejecucion del programa*/
  int main()
  {
    int x; /*contador*/
    
    /*repite 10 veces el ciclo y calcula e imprime el cuadrado de x*/
    for(x=1; x<=10; x++){
      printf("%4d", cuadrado (x) ); /*llamada a la funcion*/
    }/*fin de for*/
    
    printf("\n");
    
    return 0; /*indicaa terminacion exitosa*/
  } /*fin del main*/
  
  /*definicion de la funcion cuadrado, devuelve el cuadrado del parametro*/
  int cuadrado(int y)/*y es una copia del argumento para la funcion*/
  {
    return y*y; /*devuelve el cuadrado de y como un int*/
  } /*fin de la funcion cuadrado*/
  
  
 ********************************************************************************************
 
 /*Figura 5.4: fig05_04.c
  Encuentra el maximo de tres enteros*/
  
 #include <stdio.h>
 
 int maximo(int x, int y, int z); /*prototipo de la funcion*/
 
 /*La funcion main comienza la ejecucion del programa*/
 int main()
 {
  int numero1; /*primer entero*/
  int numero2; /*segundo entero*/
  int numero3; /*tercer entero*/
  
  printf("Introduzca tres enteros: ");
  scanf("%d%d%d", &numero1, &numero2, &numero3);
  
  /*numero1, numero2 y numero3 son argumentos
    para la llamada a la funcion maximo*/
   printf("El maximo es: %d\n", maximo(numero1, numero2, numero3));
   
   return 0;/*indica terminacion exitosa*/ 
 }/*fin de main*/
 
 /*Definicion de la funcion maximo*/
 /*x, y, y Z son parametros*/
 int maximo(int x, int y, int z)
 {
  int max = x; /*asume que x es el mayor*/
  
  if ( y > max) {/*si y es mayor que max, asigna y a max*/
    max = y;
  } /*fin de if*/
  
  if (z>max) {/*si z es mayor que max, asigna z a max*/
    max = z;
  } /*fin de if*/
  
  return max; /*max es el valor mas grande*/
 } /*fin de la funcion maximo*/
 
 
 ********************************************************************************************
 /*Figura 5.7: fig05_07.c
  Escalamiento y cambio de enteros producidos por 1 + rand() % 6*/
#include <stdio.h>
#include <stdlib.h>

/*La funcion main comienza la ejecucion del programa*/
int main()
{
  int i; /*contador*/
  
  /*repite 20 veces*/
  for (i=1; i<=20; i++){
  /*Obtiene y despliega um numero aleatorio entre 1 y 6 */
  printf("%10d\n", 1 + (rand() % 6));
  
  /*Si el contador es divisible entre 5, comienza una nueva linea de salida*/
    if (i%5 == 0) {
      printf("\n");
    }/*fin del if*/
  } /*fin de for*/
  system("pause"); /*indica terminacion extosa*/
}/*fin de main*/

 ********************************************************************************************
/*Figura 5.8: fig05_08.c
  Tiro de un dado de seis lados 6000 veces*/
#include <stdio.h>
#include <stdlib.h>
  
/*Funcion main comienza la ejecucion del programa*/
  int main()
  {
	int frecuencia1 = 0; /*contador del tiro 1*/
    int frecuencia2 = 0; /*contador del tiro 2*/
    int frecuencia3 = 0; /*contador del tiro 3*/
    int frecuencia4 = 0; /*contador del tiro 4*/
    int frecuencia5 = 0; /*contador del tiro 5*/
    int frecuencia6 = 0; /*contador del tiro 6*/
    
    int tiro; /*contador de tiros, valores de 1 a 6000*/
    
    int cara; /*representa un tiro del dado, valores de 1 a 6*/
    
	/*repite 6000 vecces y resume los resultados*/
    for (tiro = 1; tiro <= 6000; tiro++){
      cara = 1 + rand() % 6; /*numero aleatorio de 1 a 6*/
      
      /*determina el valor de cara e incrementa el contador apropiado*/
      switch ( cara ){
      
        case 1: /*tiro 1*/
          ++frecuencia1;
          break;
          
        case 2: /*tiro 2*/
          ++frecuencia2;
          break;
          
        case 3: /*tiro 3*/
          ++frecuencia3;
          break;
          
        case 4: /*tiro 4*/
          ++frecuencia4;
          break;
          
        case 5: /*tiro 58*/
		  ++frecuencia5;
          break;	
			
		case 6: /*tiro 58*/
		  ++frecuencia6;
          break;
       }/*fin de switch*/
    
    }/*fin de for*/
    
    /*despliega los resultados en forma tabular*/
    printf(" %s%13s\n ", "Cara" , "Frecuencia");
    printf(" 1%13d\n ", frecuencia1);
    printf(" 2%13d\n ", frecuencia2);
    printf(" 3%13d\n ", frecuencia3);
    printf(" 4%13d\n ", frecuencia4);
    printf(" 5%13d\n ", frecuencia5);
    printf(" 6%13d\n ", frecuencia6);
    
    system("pause"); /*indica terminacion exitosa*/
    
} /*fin de main*/

 ******************************************************************************
 /*Figura 5.9: fig05_09.c
  Randomizacion del programa de dados*/
  
  #include <stdlib.h>
  #include <stdio.h>
  
  /*La funcion main comienza la ejecucion del programa*/
  int main()
  {
    int i; /*contador*/
    unsigned semilla; /*numero que se utiliza para establecer la semilla del generador de numeros aletorios*/
    
    printf("Introduzca la semilla: ");
    scanf("%u", &semilla); /*observe el %u para un unsigned*/
    
    srand(semilla); /*establece la semilla del generador de numeros aleatorios*/
  
    /*repite 10 veces*/
    for ( i=1; i<=10; i++){
    /*obtiene y despliega un numero aleatorio entre 1 y 6*/
    printf("%10d", 1 + ( rand() % 6 ));
    
    /*Si contador es divisible entre 5, comienza una nueva linea de salida*/
    
    if( i%5 == 0){
      printf("\n");
    }/*fin de if*/
   } /*fin de for*/
   
   return 0; /*indica terminacion exitosa*/
  }/*fin de main*/
  
  ******************************************************************************
  /*Figura 5.10: fig05_0.c
    Craps*/
    #include <stdio.h>
    #include <stdlib.h>
    #include <time.h> /*contiene el prototipo de la funcion time*/
    
    /*constantes de enumeracion aue representan el estado del juego*/
    enum Estatus {CONTINUA, GANA, PIERDE};
    
    int tiraDados(void); /*prototipo de la funcion*/
    
    /*la funcion main comienza la ejecucion del programa*/
    int main()
    {
      int suma; /*suma del tiro de datos*/
      int miPunto; /*punto ganado*/
      
      enum Estatus estatusJuego /*puede cotener CONTINUA, GANA o PIERDE*/
      
      /*randomiza el generador de numeros aleatorios mediante la funcion time*/
      srand( time (NULL));
      
      suma=tiraDados(); /*primer tiro de los dados*/
      
      /*determina el estado del juego basado en la suma de los dados*/
      switch(suma){
      
        /*gana en el primer tiro*/
        case 7:
        case 11:
          estatusJuego = GANA;
          break;
          
          /*pierde en el primer tiro*/
          case 2:
          case 3:
          case 12:
            estatusJuego = PIERDE;
            break;
            
          /* Recuerda el punto */
          default:
            estatusJuego = CONTINUA;
            miPunto = suma;
            printf("Su punto es %d\n", miPunto );
            break; /*opcional*/
          } /*fin de switch*/
          
          /*mientras el juego no se complete */
          while (estatusJuego == CONTINUA ){
            suma=tiraDados(); /*tira de nuevo los dados*/
            
            /*determina el estatus del juego*/
            if (suma == miPunto){/*gana por punto*/
              estatusJuego = GANA; /*fin del juego, el jugador gana */
            }/*fin de if*/
            else{
                if( suma == 7){/* pierde al tirar 7 */
                  estatusJuego = PIERDE; /*termina el juego, el jugador pierde*/
                } /*fin de if*/
            
            }/*fin de else*/
          
          } /*fin de while*/
          
          /*despliega mensaje de triunfo o derrota*/
          if ( estatusJuego == GANA ){ /* Gano el jugador? */
            printf("El jugador gana \n");
          }/* fin de if */
          else { /*el jugador pierde*/
            printf("El jugador pierde\n");
          } /*fin de else*/
          
          return 0; /*indica terminacion exitosa*/
  } /*fin de main*/
  
  /*tiro de dados, calcula la suma y despliega los resultados*/
  int tiraDados (void)
  {
    int dado1;    /*primer dado*/
    int dado2;    /*segundo dado*/
    int sumaTemp; /*suma de los dados*/
    dado1 = 1 + ( rand() % 6); /*toma el aleatorio para el dado1*/
    dado2 = 1 + ( rand() % 6); /*toma el aleatorio para el dado2*/
    sumaTemp = dado1 + dado2; /*suma el dado1 y el dado2*/
    
    /*despliega los resultados de este tiro*/
    printf ("El jugador tiro %d + %d = %d\n", dado1, dado2, sumaTemp );
    
    return sumaTemp; /*devuelve la suma de los dados*/
  
  } /*fin de la funcion tiraDados*/
         
  ******************************************************************************
  /*Figura 5.12: fig05_12.c
    Ejmplo de alcance */
#include <stdio.h>  

void usoLocal (void); /*prototipo de funcion*/
void usoStaticLocal (void); /*prototipo de funcion*/
void usoGlobal (void); /*prototipo de funcion*/

int x=1; /*variable global*/

/*La funcion main comienza la ejecucion del programa*/
int main()
{
  int x=5; /*variable local en main*/
  printf("la x local fuera del alcance de main es %d\n", x);
  
  { /*comienza el nuevo alcance*/
    int x = 7; /*variable local con nuevo alcance*/
    
    printf ( "la x local en el alcance interno de main es %d\n", x);
  } /*fin de nuevo alcance*/
  
  printf("la x local en el alcance externo de main es %d\n", x);
  
  usoLocal(); /*usoLocal contiene una x local*/
  usoStaticLocal(); /*usoStaticLocal contiene una x local estatica*/
  usoGlobal(); /*usoGlobal utiliza una x global*/
  usoLocal(); /*usoLocal reinicializa la x local automatica*/
  usoStaticLocal(); /*static local x retiene su valor previo*/
  usoGlobal(); /*x global tambien retiene su valor*/
  
  printf("\n x local en main es %d\n", x);
  
  return 0; /* indica terminacion exitosa*/
}

/*usoLocal reinicializa a la variable local x durante cada llamada*/
void usoLocal (void)
{
  int x = 25; /*se inicializa cada vez que se llama usoLocal*/
  
  printf("\nlaxlocal en usoLocal es %d despues de entrar a usoLocal \n", x );
  x++;
  printf("la x local en usoLocal es %d antes de salir de usoLocal\n", x);
}/*fin de la funcion usoLocal*/

/*usoStaticLocal inicializa la variable static local x solo la primera */

 ********************************************************************************************
 /* Figura 5.14: fig05_14.c
  Funcion factorial recursiva */
#include <stdio.h>

long factorial ( long numero ); 

/*la funcion main comienza la ejecucion del programa*/
int main()
{
  int i; /*contador*/
  
  /*repite 11 veces: durante cada iteracion, calcula 
    el factorial (i) y despliega el resultado*/
    for (i=0; i <= 10; i++){
      printf("%2d! = %1d\n", i , factorial (i) );
    }/*fin de for*/
    
    return 0; /*indica terminacion exitosa*/
} /*fin de main*/

/*definicion recursiva de la funcion factorial*/
long factorial(long numero)
{
  /*caso base*/
  if ( numero <= 1){
    return 1;
 }/*fin de if*/
 else {/*paso recursivo*/
  return (numero * factorial ( numero - 1));
 }/*fin del else*/
}/*fin de la funcion factorial*/


 ********************************************************************************************
 /*Figura 5.15: fig05_15.c
  Funcion recursiva de fibonacci*/
#include <stdio.h>

long fibonacci (long n); /*prototipo de la funcion*/

/*la funcion main comienza la ejecucion del programa*/
int main()
{
  long resultado; /*valor de fibonacci*/
  long numero;    /* numero a introducir por el usuario*/
/*obtiene un entero del usuario*/
printf("Introduzca un entero: ");
scanf("%1d", &numero);

/*calcula el valor fibonacci del numero introducido por el usuario*/
resultado = fibonacci (numero);

/*despliega el resultado*/
printf ("Fibonacci (%1d) = %1d\n", numero, resultado);

return 0; /*indica terminacion exitosa*/
}/*fin del main*/

/*definicion de la funcion recursiva fibonacci*/
long fibonacci (long n)
{
  /*caso base*/
  if ( n == 0 || n == 1) {
    return n;
  }/*fin del if*/
  else {/*paso recursivo*/
    return fibonacci ( n - 1 ) + fibonacci (n - 2);
  } /*fin de else*/
}/*fin de la funcion fibonacci
 
 
